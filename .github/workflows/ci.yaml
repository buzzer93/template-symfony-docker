name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: "8.2"
  # Paramétrable côté repo/env si besoin : Settings > Variables
  DATABASE_VERSION: "8.0"
  APP_ENV: test

jobs:
  lint:
    name: Lint (YAML/JSON/XML/Twig + CS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          tools: composer
          extensions: intl, mbstring, xml, ctype, tokenizer, dom, curl

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      # Lints Symfony natifs (rapides, zéro config)
      - name: Lint YAML (Symfony)
        run: php bin/console lint:yaml config translations --env=test

      - name: Lint Twig (Symfony)
        run: php bin/console lint:twig templates --env=test

      - name: Lint Container (Symfony)
        run: php bin/console lint:container --env=test

      # Lints via GrumPHP (si présents dans ton grumphp.yml)
      - name: Lints YAML/JSON/XML (GrumPHP)
        run: vendor/bin/grumphp run --tasks=yamllint,jsonlint,xmllint -n

      # Style (PSR-12 via PHP-CS-Fixer en dry-run)
      - name: PHP-CS-Fixer (check)
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

  tests:
    name: PHPUnit (MySQL ${{ env.DATABASE_VERSION }})
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:${{ env.DATABASE_VERSION }}
        env:
          MYSQL_DATABASE: app
          MYSQL_USER: symfony
          MYSQL_PASSWORD: symfony
          MYSQL_ROOT_PASSWORD: root
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s --health-timeout=5s --health-retries=20

    env:
      APP_ENV: test
      DATABASE_URL: "mysql://symfony:symfony@127.0.0.1:3306/app?serverVersion=${{ env.DATABASE_VERSION }}&charset=utf8mb4"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: xdebug
          tools: composer
          extensions: intl, pdo_mysql, mbstring, xml, ctype, tokenizer, dom, curl

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Prepare test env
        run: |
          cp .env .env.test.local || true
          sed -i 's/^APP_ENV=.*/APP_ENV=test/' .env.test.local || true
          echo "DATABASE_URL=${DATABASE_URL}" >> .env.test.local

      - name: Warmup cache
        run: php bin/console cache:warmup --env=test

      - name: Migrate database
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Run PHPUnit
        run: |
          vendor/bin/phpunit -v --colors=always \
            --log-junit var/junit.xml \
            --coverage-clover var/coverage.xml

      - name: Upload JUnit
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-junit
          path: var/junit.xml
          if-no-files-found: ignore

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: var/coverage.xml
          if-no-files-found: ignore

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          tools: composer
          extensions: intl, mbstring, xml, ctype, tokenizer, dom, curl

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse -c phpstan.dist.neon

  security:
    name: Security audit (composer audit)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          tools: composer

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Composer audit
        run: composer audit --no-interaction --format=summary

  # Optionnel : build Docker pour vérifier que l'image FROM php:8.2-apache se construit
  docker-build:
    name: Docker build (php:8.2-apache)
    runs-on: ubuntu-latest
    needs: [tests, phpstan]  # on ne build que si tests & analyse passent
    if: ${{ github.event_name != 'pull_request' }} # évite de builder sur PR, modifie selon ton besoin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build \
            --build-arg APP_ENV=prod \
            -t myapp:${{ github.sha }} \
            -f Dockerfile .
